FROM ppc64le/ubuntu:16.04

# First build the 8.0-runtime-ubuntu16.04 layers

RUN NVIDIA_GPGKEY_SUM=d1be581509378368edeec8c1eb2958702feedf3bc3d17011adbf24efacce4ab5 && \
    NVIDIA_GPGKEY_FPR=ae09fe4bbd223a84b2ccfce3f60f4b3d7fa2af80 && \
    apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/ppc64el/7fa2af80.pub && \
    apt-key adv --export --no-emit-version -a $NVIDIA_GPGKEY_FPR | tail -n +5 > cudasign.pub && \
    echo "$NVIDIA_GPGKEY_SUM  cudasign.pub" | sha256sum -c --strict - && rm cudasign.pub && \
    echo "deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/ppc64el /" > /etc/apt/sources.list.d/cuda.list

ENV CUDA_VERSION 8.0.61
LABEL com.nvidia.cuda.version="${CUDA_VERSION}"
ENV NVIDIA_CUDA_VERSION $CUDA_VERSION

ENV CUDA_PKG_VERSION 8-0=$CUDA_VERSION-1
RUN apt-get update && apt-get install -y --no-install-recommends \
        cuda-nvrtc-$CUDA_PKG_VERSION \
        cuda-nvgraph-$CUDA_PKG_VERSION \
        cuda-cusolver-$CUDA_PKG_VERSION \
        cuda-cublas-8-0=8.0.61.2-1 \
        cuda-cufft-$CUDA_PKG_VERSION \
        cuda-curand-$CUDA_PKG_VERSION \
        cuda-cusparse-$CUDA_PKG_VERSION \
        cuda-npp-$CUDA_PKG_VERSION \
        cuda-cudart-$CUDA_PKG_VERSION && \
    ln -s cuda-8.0 /usr/local/cuda && \
    rm -rf /var/lib/apt/lists/*

# nvidia-docker 1.0
LABEL com.nvidia.volumes.needed="nvidia_driver"

RUN echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf

ENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility

# Next build the 8.0-runtime-ubuntu16.04 layers

RUN apt-get update && apt-get install -y --no-install-recommends \
        cuda-core-$CUDA_PKG_VERSION \
        cuda-misc-headers-$CUDA_PKG_VERSION \
        cuda-command-line-tools-$CUDA_PKG_VERSION \
        cuda-nvrtc-dev-$CUDA_PKG_VERSION \
        cuda-nvml-dev-$CUDA_PKG_VERSION \
        cuda-nvgraph-dev-$CUDA_PKG_VERSION \
        cuda-cusolver-dev-$CUDA_PKG_VERSION \
        cuda-cublas-dev-8-0=8.0.61.2-1 \
        cuda-cufft-dev-$CUDA_PKG_VERSION \
        cuda-curand-dev-$CUDA_PKG_VERSION \
        cuda-cusparse-dev-$CUDA_PKG_VERSION \
        cuda-npp-dev-$CUDA_PKG_VERSION \
        cuda-cudart-dev-$CUDA_PKG_VERSION \
        cuda-driver-dev-$CUDA_PKG_VERSION && \
    rm -rf /var/lib/apt/lists/*

ENV LIBRARY_PATH /usr/local/cuda/lib64/stubs:${LIBRARY_PATH}

# Next build the 8.0-cudnn6-devel layers

RUN echo "deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/ppc64el /" > /etc/apt/sources.list.d/nvidia-ml.list

ENV CUDNN_VERSION 6.0.21
LABEL com.nvidia.cudnn.version="${CUDNN_VERSION}"

RUN apt-get update && apt-get install -y --no-install-recommends \
            libcudnn6=$CUDNN_VERSION-1+cuda8.0 \
            libcudnn6-dev=$CUDNN_VERSION-1+cuda8.0 && \
    rm -rf /var/lib/apt/lists/*

# Dependencies for building pocl

RUN apt-get update && apt-get install -y llvm clang llvm-3.8-dev libclang-3.8-dev clang-3.8 cmake automake autoconf libtool
RUN apt-get update && apt-get install -y git pkg-config
RUN apt-get update && apt-get install -y hwloc-nox libhwloc-dev
RUN apt-get update && apt-get install -y libz-dev

#RUN llvm-as /dev/null | llc -mcpu=help

#ENV POCL_BUILDING=1
#RUN git clone https://github.com/pocl/pocl /pocl
#RUN cd /pocl \
# && . tools/scripts/devel-envs.sh \
# && mkdir build \
# && cd build \
# && cmake -DLLC_HOST_CPU=$(uname -p) .. \
# && make \
# && make install

#RUN git clone https://forge.imag.fr/anonscm/git/ocl-icd/ocl-icd.git /ocl-icd
#ENV OCL_ICD_VENDORS="/pocl/ocl-vendors"
#RUN cd /ocl-icd \
# && aclocal \
# && automake --add-missing \
# && autoconf \
# && ../configure \
# && make \
# && make install

# Now install the synthetic-target-area-of-interest dependencies

RUN apt-get update && apt-get install -y --no-install-recommends \
        python-pip python-dev git libfreetype6-dev libpng-dev subversion libjpeg-dev

RUN pip install --upgrade pip setuptools

# Install curl
RUN apt-get update
RUN apt-get install -y curl

RUN curl -sL -o /anaconda.sh https://repo.continuum.io/archive/Anaconda2-5.0.0-Linux-ppc64le.sh
RUN bash /anaconda.sh -b -p /usr/local/anaconda
#ENV PATH=/usr/local/anaconda/bin:$PATH

#RUN conda create -n tensorflow python=2.7 -y
#RUN bash -xc 'source /usr/local/anaconda/bin/activate tensorflow \
# && pip install --ignore-installed --upgrade tensorflow-gpu \
# '

RUN curl -sL https://anaconda.org/anaconda/tensorflow/1.2.1/download/linux-ppc64le/tensorflow-1.2.1-py27_0.tar.bz2 | tar xjf - -C /usr/local
RUN curl -sL https://anaconda.org/anaconda/tensorflow-gpu/1.2.1/download/linux-ppc64le/tensorflow-gpu-1.2.1-py27cuda8.0cudnn6.0_0.tar.bz2 | tar xjf - -C /usr/local
RUN mv /usr/local/lib/python2.7/site-packages/* /usr/local/lib/python2.7/dist-packages/

RUN apt-get install -y python-tk protobuf-compiler libprotobuf-dev

RUN pip install numpy mock pandas protobuf==3.2 backports.weakref
RUN pip install werkzeug
RUN pip install markdown

RUN ln -s /usr/local /opt/anaconda1anaconda2anaconda3
RUN ln -nsf /usr/bin/python /usr/local/bin/python

CMD bash
